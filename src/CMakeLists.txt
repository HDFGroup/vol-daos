#------------------------------------------------------------------------------
# Include source and build directories
#------------------------------------------------------------------------------
set(HDF5_VOL_DAOS_BUILD_INCLUDE_DEPENDENCIES
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_SOURCE_DIR}/util
  ${CMAKE_CURRENT_BINARY_DIR}
)

#------------------------------------------------------------------------------
# Internal dependencies (exported libs)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# External dependencies
#------------------------------------------------------------------------------
# DAOS
find_package(DAOS REQUIRED)
set(HDF5_VOL_DAOS_EXT_INCLUDE_DEPENDENCIES
  ${HDF5_VOL_DAOS_EXT_INCLUDE_DEPENDENCIES}
  ${DAOS_INCLUDE_DIRS}
)
set(HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES
  ${HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES}
  ${DAOS_LIBRARIES}
)

# HDF5
find_package(HDF5 1.13.0 NO_MODULE NAMES hdf5 COMPONENTS C shared)
if(HDF5_FOUND)
  set(HDF5_C_SHARED_LIBRARY hdf5-shared)
  if(NOT TARGET ${HDF5_C_SHARED_LIBRARY})
      message(FATAL_ERROR "Could not find hdf5 shared target, please make "
      "sure that HDF5 has ben compiled with shared libraries enabled.")
  endif()
  set(HDF5_VOL_DAOS_EXT_PKG_DEPENDENCIES
    ${HDF5_VOL_DAOS_EXT_PKG_DEPENDENCIES}
    ${HDF5_C_SHARED_LIBRARY}
  )
  set(HDF5_VOL_DAOS_USE_SYSTEM_CMAKE_HDF5 1 PARENT_SCOPE)
else()
  # Allow for HDF5 autotools builds
  find_package(HDF5 1.13.0 MODULE REQUIRED)
  set(HDF5_VOL_DAOS_EXT_INCLUDE_DEPENDENCIES
    ${HDF5_VOL_DAOS_EXT_INCLUDE_DEPENDENCIES}
    ${HDF5_INCLUDE_DIRS}
  )
  set(HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES
    ${HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES}
    ${HDF5_LIBRARIES}
  )
  set(HDF5_VOL_DAOS_USE_SYSTEM_CMAKE_HDF5 0 PARENT_SCOPE)
endif()

# MPI
find_package(MPI REQUIRED COMPONENTS C)
set(HDF5_VOL_DAOS_EXT_INCLUDE_DEPENDENCIES
  ${HDF5_VOL_DAOS_EXT_INCLUDE_DEPENDENCIES}
  ${MPI_C_INCLUDE_DIRS}
)
set(HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES
  ${HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES}
  ${MPI_C_LIBRARIES}
)

# UUID
find_package(UUID REQUIRED)
set(HDF5_VOL_DAOS_EXT_INCLUDE_DEPENDENCIES
  ${HDF5_VOL_DAOS_EXT_INCLUDE_DEPENDENCIES}
  ${UUID_INCLUDE_DIRS}
)
set(HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES
  ${HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES}
  ${UUID_LIBRARIES}
)

#-----------------------------------------------------------------------------
# Option to enable memory checker
#-----------------------------------------------------------------------------
option(HDF5_VOL_DAOS_ENABLE_MEM_TRACKING "Turn on memory checker." OFF)
if(HDF5_VOL_DAOS_ENABLE_MEM_TRACKING)
  set(DV_TRACK_MEM_USAGE 1)
endif()
mark_as_advanced(HDF5_VOL_DAOS_ENABLE_MEM_TRACKING)

#------------------------------------------------------------------------------
# Configure module header files
#------------------------------------------------------------------------------
# Set unique vars used in the autogenerated config file (symbol import/export)
configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/daos_vol_config.h.in
  ${CMAKE_CURRENT_BINARY_DIR}/daos_vol_config.h
)

#------------------------------------------------------------------------------
# Set sources
#------------------------------------------------------------------------------
set(HDF5_VOL_DAOS_SRCS
  ${CMAKE_CURRENT_SOURCE_DIR}/daos_vol.c
  ${CMAKE_CURRENT_SOURCE_DIR}/daos_vol_attr.c
  ${CMAKE_CURRENT_SOURCE_DIR}/daos_vol_blob.c
  ${CMAKE_CURRENT_SOURCE_DIR}/daos_vol_dset.c
  ${CMAKE_CURRENT_SOURCE_DIR}/daos_vol_file.c
  ${CMAKE_CURRENT_SOURCE_DIR}/daos_vol_group.c
  ${CMAKE_CURRENT_SOURCE_DIR}/daos_vol_link.c
  ${CMAKE_CURRENT_SOURCE_DIR}/daos_vol_map.c
  ${CMAKE_CURRENT_SOURCE_DIR}/daos_vol_obj.c
  ${CMAKE_CURRENT_SOURCE_DIR}/daos_vol_req.c
  ${CMAKE_CURRENT_SOURCE_DIR}/daos_vol_type.c
  ${CMAKE_CURRENT_SOURCE_DIR}/daos_vol_testing.c
  ${CMAKE_CURRENT_SOURCE_DIR}/util/daos_vol_mem.c
  ${CMAKE_CURRENT_SOURCE_DIR}/util/daos_vol_err.c
  ${CMAKE_CURRENT_SOURCE_DIR}/util/daos_vol_hash_table.c
  ${CMAKE_CURRENT_SOURCE_DIR}/util/daos_vol_task_list.c
)
if(HDF5_VOL_DAOS_ENABLE_DEBUG)
  set(HDF5_VOL_DAOS_SRCS
    ${HDF5_VOL_DAOS_SRCS}
    ${CMAKE_CURRENT_SOURCE_DIR}/daos_vol_debug.c
  )
endif()

#-----------------------------------------------------------------------------
# Specify project header files to be installed
#-----------------------------------------------------------------------------
set(HDF5_VOL_DAOS_PUBLIC_HEADERS
  ${CMAKE_CURRENT_BINARY_DIR}/daos_vol_config.h
  ${CMAKE_CURRENT_SOURCE_DIR}/daos_vol.h
)

#------------------------------------------------------------------------------
# Specify project private header files
#------------------------------------------------------------------------------
set(HDF5_VOL_DAOS_PRIVATE_HEADERS
  ${CMAKE_CURRENT_SOURCE_DIR}/daos_vol_private.h
  ${CMAKE_CURRENT_SOURCE_DIR}/util/daos_vol_mem.h
  ${CMAKE_CURRENT_SOURCE_DIR}/util/daos_vol_err.h
  ${CMAKE_CURRENT_SOURCE_DIR}/util/daos_vol_hash_table.h
  ${CMAKE_CURRENT_SOURCE_DIR}/util/daos_vol_task_list.h
)

#------------------------------------------------------------------------------
# Libraries
#------------------------------------------------------------------------------

# Clean up system include path first
foreach(item ${HDF5_VOL_DAOS_SYSTEM_INCLUDE_PATH})
  if(HDF5_VOL_DAOS_EXT_INCLUDE_DEPENDENCIES)
    list(REMOVE_ITEM HDF5_VOL_DAOS_EXT_INCLUDE_DEPENDENCIES ${item})
  endif()
endforeach()

# HDF5 DAOS
add_library(hdf5_vol_daos ${HDF5_VOL_DAOS_SRCS}
  ${HDF5_VOL_DAOS_PUBLIC_HEADERS} ${HDF5_VOL_DAOS_PRIVATE_HEADERS}
)
target_include_directories(hdf5_vol_daos
  PUBLIC  "$<BUILD_INTERFACE:${HDF5_VOL_DAOS_BUILD_INCLUDE_DEPENDENCIES}>"
          $<INSTALL_INTERFACE:${HDF5_VOL_DAOS_INSTALL_INCLUDE_INTERFACE}>
)
target_include_directories(hdf5_vol_daos
  SYSTEM PUBLIC ${HDF5_VOL_DAOS_EXT_INCLUDE_DEPENDENCIES}
)
target_link_libraries(hdf5_vol_daos
  ${HDF5_VOL_DAOS_EXPORTED_LIBS}
  ${HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES}
  ${HDF5_VOL_DAOS_EXT_PKG_DEPENDENCIES}
  )
hdf5_vol_daos_set_lib_options(hdf5_vol_daos "hdf5_vol_daos" ${HDF5_VOL_DAOS_LIBTYPE})
if(HDF5_VOL_DAOS_ENABLE_COVERAGE)
  set_coverage_flags(hdf5_vol_daos)
endif()
set_target_properties(hdf5_vol_daos PROPERTIES
  PUBLIC_HEADER "${HDF5_VOL_DAOS_PUBLIC_HEADERS}"
)

set(HDF5_VOL_DAOS_EXPORTED_LIBS hdf5_vol_daos ${HDF5_VOL_DAOS_EXPORTED_LIBS})

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install
#-----------------------------------------------------------------------------
install(
  TARGETS
    hdf5_vol_daos
  EXPORT
    ${HDF5_VOL_DAOS_EXPORTED_TARGETS}
  LIBRARY DESTINATION ${HDF5_VOL_DAOS_INSTALL_LIB_DIR}
  ARCHIVE DESTINATION ${HDF5_VOL_DAOS_INSTALL_LIB_DIR}
  PUBLIC_HEADER DESTINATION  ${HDF5_VOL_DAOS_INSTALL_INCLUDE_DIR}
  RUNTIME DESTINATION ${HDF5_VOL_DAOS_INSTALL_BIN_DIR}
)

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install for import into other projects
#-----------------------------------------------------------------------------
install(
  EXPORT
    ${HDF5_VOL_DAOS_EXPORTED_TARGETS}
  DESTINATION
    ${HDF5_VOL_DAOS_INSTALL_DATA_DIR}/cmake/${HDF5_VOL_DAOS_PACKAGE}
  FILE
    ${HDF5_VOL_DAOS_EXPORTED_TARGETS}.cmake
)

#-----------------------------------------------------------------------------
# Export all exported targets to the build tree for use by parent project
#-----------------------------------------------------------------------------
if(NOT HDF5_VOL_DAOS_EXTERNALLY_CONFIGURED)
  export(
    TARGETS
      ${HDF5_VOL_DAOS_EXPORTED_LIBS}
    FILE
      ${HDF5_VOL_DAOS_EXPORTED_TARGETS}.cmake
  )
# TODO There is a namespace issue with the way HDF5 currently defines targets
#  if(NOT HDF5_VOL_DAOS_USE_SYSTEM_HDF5)
#    export(
#      TARGETS
#        ...
#      APPEND FILE
#        ${HDF5_VOL_DAOS_EXPORTED_TARGETS}.cmake
#      NAMESPACE hdf5::
#    )
#  endif()
endif()

#------------------------------------------------------------------------------
# Set variables for parent scope
#------------------------------------------------------------------------------

# Pkg-config configuration
if(CMAKE_BUILD_TYPE)
  string(TOLOWER ${CMAKE_BUILD_TYPE} lower_cmake_build_type)
endif()

# HDF5 DAOS package dependencies
foreach(pkg_dep ${HDF5_VOL_DAOS_EXT_PKG_DEPENDENCIES})
  set(HDF5_VOL_DAOS_PKG_DEPENDENCIES "${HDF5_VOL_DAOS_PKG_DEPENDENCIES} ${pkg_dep}")
endforeach()
set(HDF5_VOL_DAOS_PKG_DEPENDENCIES ${HDF5_VOL_DAOS_PKG_DEPENDENCIES} PARENT_SCOPE)

# HDF5 DAOS private library dependencies
foreach(exported_lib ${HDF5_VOL_DAOS_EXPORTED_LIBS})
  if(lower_cmake_build_type MATCHES "debug")
    get_target_property(HDF5_VOL_DAOS_LIBRARY ${exported_lib} OUTPUT_NAME_DEBUG)
  else()
    get_target_property(HDF5_VOL_DAOS_LIBRARY ${exported_lib} OUTPUT_NAME_RELEASE)
  endif()
  set(HDF5_VOL_DAOS_LIBRARIES "${HDF5_VOL_DAOS_LIBRARIES} -l${HDF5_VOL_DAOS_LIBRARY}")
endforeach()
set(HDF5_VOL_DAOS_LIBRARIES ${HDF5_VOL_DAOS_LIBRARIES} PARENT_SCOPE)

# HDF5 DAOS external library dependencies
# Need to generate -llib if not already passed
set(HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES
  ${HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES}
  ${HDF5_VOL_DAOS_EXT_PKG_LIB_DEPENDENCIES}
)
foreach(lib_dep ${HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES})
  # get library name
  get_filename_component(lib_name ${lib_dep} NAME_WE)
  if(lib_name MATCHES "^-l")
    # lib_name found is -lxxx
    set(HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES_LIST ${HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES_LIST} ${lib_name})
  else()
    # lib_name is /path/to/lib so get library path and name
    get_filename_component(lib_path ${lib_dep} PATH)
    string(REGEX REPLACE "^lib" "" lib_name ${lib_name})
    set(HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES_LIST ${HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES_LIST} -L${lib_path} -l${lib_name})
  endif()
endforeach()
if(HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES_LIST)
  list(REMOVE_DUPLICATES HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES_LIST)
endif()
foreach(lib_dep ${HDF5_VOL_DAOS_EXT_LIB_DEPENDENCIES_LIST})
  set(HDF5_VOL_DAOS_LIB_DEPENDENCIES "${HDF5_VOL_DAOS_LIB_DEPENDENCIES} ${lib_dep}")
endforeach()
set(HDF5_VOL_DAOS_LIB_DEPENDENCIES ${HDF5_VOL_DAOS_LIB_DEPENDENCIES} PARENT_SCOPE)

# External include dependencies
set(HDF5_VOL_DAOS_EXT_INCLUDE_DEPENDENCIES
  ${HDF5_VOL_DAOS_EXT_INCLUDE_DEPENDENCIES}
  ${HDF5_VOL_DAOS_EXT_PKG_INCLUDE_DEPENDENCIES}
)
if(HDF5_VOL_DAOS_EXT_INCLUDE_DEPENDENCIES)
  list(REMOVE_DUPLICATES HDF5_VOL_DAOS_EXT_INCLUDE_DEPENDENCIES)
endif()
foreach(inc_dep ${HDF5_VOL_DAOS_EXT_INCLUDE_DEPENDENCIES})
  set(HDF5_VOL_DAOS_INCLUDE_DEPENDENCIES "${HDF5_VOL_DAOS_INCLUDE_DEPENDENCIES} -I${inc_dep}")
endforeach()
set(HDF5_VOL_DAOS_INCLUDE_DEPENDENCIES ${HDF5_VOL_DAOS_INCLUDE_DEPENDENCIES} PARENT_SCOPE)
